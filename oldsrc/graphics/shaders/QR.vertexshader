#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 squareVertices;

// Output data ; will be interpolated for each fragment.
out vec2 UV;

// Values that stay constant for the whole mesh.
uniform vec3 CameraRight_worldspace;
uniform vec3 CameraUp_worldspace;
uniform mat4 VP; // Model-View-Projection matrix, but without the Model (the position is in QRPos; the orientation depends on the camera)
uniform vec3 QRPos; //position of the center of the code
uniform vec2 QRSize; // Size of the code, in world units (probably meters)

void main()
{
	vec3 particleCenter_wordspace = QRPos;

	vec3 vertexPosition_worldspace =
		particleCenter_wordspace
		+ CameraRight_worldspace * squareVertices.x * QRSize.x
		+ CameraUp_worldspace * squareVertices.y * QRSize.y;


	gl_Position = VP * vec4(vertexPosition_worldspace, 1.0f);
  //QRSize is in percentage of the screen size (1,1 for fullscreen)
  //vertexPosition_worldspace = particleCenter_wordspace;
	//gl_Position = VP * vec4(vertexPosition_worldspace, 1.0f); // Get the screen-space position of the particle's center
	//gl_Position /= gl_Position.w; // Here we have to do the perspective division ourselves.
	//gl_Position.xy += squareVertices.xy * vec2(0.2, 0.05); // Move the vertex in directly screen space. No need for CameraUp/Right_worlspace here.

  UV = squareVertices.xy + vec2(0.5, 0.5);
}
